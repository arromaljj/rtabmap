// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: laser_scan.proto
// Protobuf C++ Version: 5.29.1

#include "laser_scan.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rtabmap {

inline constexpr LaserScanProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mat_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_{0},
        max_points_{0},
        range_min_{0},
        range_max_{0},
        angle_min_{0},
        angle_max_{0},
        angle_increment_{0},
        rows_{0},
        cols_{0},
        type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LaserScanProto::LaserScanProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LaserScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaserScanProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaserScanProtoDefaultTypeInternal() {}
  union {
    LaserScanProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaserScanProtoDefaultTypeInternal _LaserScanProto_default_instance_;
}  // namespace rtabmap
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_laser_5fscan_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_laser_5fscan_2eproto = nullptr;
const ::uint32_t
    TableStruct_laser_5fscan_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.format_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.max_points_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.range_min_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.range_max_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.angle_min_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.angle_max_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.angle_increment_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.rows_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.cols_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::rtabmap::LaserScanProto, _impl_.mat_data_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rtabmap::LaserScanProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rtabmap::_LaserScanProto_default_instance_._instance,
};
const char descriptor_table_protodef_laser_5fscan_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020laser_scan.proto\022\007rtabmap\"\325\001\n\016LaserSca"
    "nProto\022\016\n\006format\030\001 \001(\005\022\022\n\nmax_points\030\002 \001"
    "(\005\022\021\n\trange_min\030\003 \001(\002\022\021\n\trange_max\030\004 \001(\002"
    "\022\021\n\tangle_min\030\005 \001(\002\022\021\n\tangle_max\030\006 \001(\002\022\027"
    "\n\017angle_increment\030\007 \001(\002\022\014\n\004rows\030\010 \001(\005\022\014\n"
    "\004cols\030\t \001(\005\022\014\n\004type\030\n \001(\005\022\020\n\010mat_data\030\013 "
    "\001(\014b\006proto3"
};
static ::absl::once_flag descriptor_table_laser_5fscan_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_laser_5fscan_2eproto = {
    false,
    false,
    251,
    descriptor_table_protodef_laser_5fscan_2eproto,
    "laser_scan.proto",
    &descriptor_table_laser_5fscan_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_laser_5fscan_2eproto::offsets,
    file_level_enum_descriptors_laser_5fscan_2eproto,
    file_level_service_descriptors_laser_5fscan_2eproto,
};
namespace rtabmap {
// ===================================================================

class LaserScanProto::_Internal {
 public:
};

LaserScanProto::LaserScanProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rtabmap.LaserScanProto)
}
inline PROTOBUF_NDEBUG_INLINE LaserScanProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::rtabmap::LaserScanProto& from_msg)
      : mat_data_(arena, from.mat_data_),
        _cached_size_{0} {}

LaserScanProto::LaserScanProto(
    ::google::protobuf::Arena* arena,
    const LaserScanProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LaserScanProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, format_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, format_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, format_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:rtabmap.LaserScanProto)
}
inline PROTOBUF_NDEBUG_INLINE LaserScanProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : mat_data_(arena),
        _cached_size_{0} {}

inline void LaserScanProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, format_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, format_) +
               sizeof(Impl_::type_));
}
LaserScanProto::~LaserScanProto() {
  // @@protoc_insertion_point(destructor:rtabmap.LaserScanProto)
  SharedDtor(*this);
}
inline void LaserScanProto::SharedDtor(MessageLite& self) {
  LaserScanProto& this_ = static_cast<LaserScanProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mat_data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* LaserScanProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LaserScanProto(arena);
}
constexpr auto LaserScanProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LaserScanProto),
                                            alignof(LaserScanProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LaserScanProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LaserScanProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LaserScanProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LaserScanProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LaserScanProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LaserScanProto>(), &LaserScanProto::ByteSizeLong,
            &LaserScanProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_._cached_size_),
        false,
    },
    &LaserScanProto::kDescriptorMethods,
    &descriptor_table_laser_5fscan_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LaserScanProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 0, 2> LaserScanProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rtabmap::LaserScanProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 format = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaserScanProto, _impl_.format_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.format_)}},
    // int32 max_points = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaserScanProto, _impl_.max_points_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.max_points_)}},
    // float range_min = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.range_min_)}},
    // float range_max = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.range_max_)}},
    // float angle_min = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_min_)}},
    // float angle_max = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_max_)}},
    // float angle_increment = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_increment_)}},
    // int32 rows = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaserScanProto, _impl_.rows_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.rows_)}},
    // int32 cols = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaserScanProto, _impl_.cols_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.cols_)}},
    // int32 type = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaserScanProto, _impl_.type_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.type_)}},
    // bytes mat_data = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.mat_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 format = 1;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.format_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_points = 2;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.max_points_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float range_min = 3;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.range_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float range_max = 4;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.range_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_min = 5;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_max = 6;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_increment = 7;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.angle_increment_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 rows = 8;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.rows_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cols = 9;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.cols_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 10;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes mat_data = 11;
    {PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.mat_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void LaserScanProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rtabmap.LaserScanProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mat_data_.ClearToEmpty();
  ::memset(&_impl_.format_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LaserScanProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LaserScanProto& this_ = static_cast<const LaserScanProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LaserScanProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LaserScanProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:rtabmap.LaserScanProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 format = 1;
          if (this_._internal_format() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_format(), target);
          }

          // int32 max_points = 2;
          if (this_._internal_max_points() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_max_points(), target);
          }

          // float range_min = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_range_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_range_min(), target);
          }

          // float range_max = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_range_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_range_max(), target);
          }

          // float angle_min = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_angle_min(), target);
          }

          // float angle_max = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_angle_max(), target);
          }

          // float angle_increment = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_increment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_angle_increment(), target);
          }

          // int32 rows = 8;
          if (this_._internal_rows() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_rows(), target);
          }

          // int32 cols = 9;
          if (this_._internal_cols() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_cols(), target);
          }

          // int32 type = 10;
          if (this_._internal_type() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_type(), target);
          }

          // bytes mat_data = 11;
          if (!this_._internal_mat_data().empty()) {
            const std::string& _s = this_._internal_mat_data();
            target = stream->WriteBytesMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:rtabmap.LaserScanProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LaserScanProto::ByteSizeLong(const MessageLite& base) {
          const LaserScanProto& this_ = static_cast<const LaserScanProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LaserScanProto::ByteSizeLong() const {
          const LaserScanProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:rtabmap.LaserScanProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes mat_data = 11;
            if (!this_._internal_mat_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_mat_data());
            }
            // int32 format = 1;
            if (this_._internal_format() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_format());
            }
            // int32 max_points = 2;
            if (this_._internal_max_points() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_points());
            }
            // float range_min = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_range_min()) != 0) {
              total_size += 5;
            }
            // float range_max = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_range_max()) != 0) {
              total_size += 5;
            }
            // float angle_min = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_min()) != 0) {
              total_size += 5;
            }
            // float angle_max = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_max()) != 0) {
              total_size += 5;
            }
            // float angle_increment = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_increment()) != 0) {
              total_size += 5;
            }
            // int32 rows = 8;
            if (this_._internal_rows() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_rows());
            }
            // int32 cols = 9;
            if (this_._internal_cols() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cols());
            }
            // int32 type = 10;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LaserScanProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LaserScanProto*>(&to_msg);
  auto& from = static_cast<const LaserScanProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtabmap.LaserScanProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mat_data().empty()) {
    _this->_internal_set_mat_data(from._internal_mat_data());
  }
  if (from._internal_format() != 0) {
    _this->_impl_.format_ = from._impl_.format_;
  }
  if (from._internal_max_points() != 0) {
    _this->_impl_.max_points_ = from._impl_.max_points_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_range_min()) != 0) {
    _this->_impl_.range_min_ = from._impl_.range_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_range_max()) != 0) {
    _this->_impl_.range_max_ = from._impl_.range_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_min()) != 0) {
    _this->_impl_.angle_min_ = from._impl_.angle_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_max()) != 0) {
    _this->_impl_.angle_max_ = from._impl_.angle_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_increment()) != 0) {
    _this->_impl_.angle_increment_ = from._impl_.angle_increment_;
  }
  if (from._internal_rows() != 0) {
    _this->_impl_.rows_ = from._impl_.rows_;
  }
  if (from._internal_cols() != 0) {
    _this->_impl_.cols_ = from._impl_.cols_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaserScanProto::CopyFrom(const LaserScanProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtabmap.LaserScanProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LaserScanProto::InternalSwap(LaserScanProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mat_data_, &other->_impl_.mat_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.type_)
      + sizeof(LaserScanProto::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaserScanProto, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
}

::google::protobuf::Metadata LaserScanProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rtabmap
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_laser_5fscan_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
