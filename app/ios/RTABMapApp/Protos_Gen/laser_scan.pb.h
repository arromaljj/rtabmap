// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: laser_scan.proto
// Protobuf C++ Version: 5.29.1

#ifndef laser_5fscan_2eproto_2epb_2eh
#define laser_5fscan_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_laser_5fscan_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_laser_5fscan_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_laser_5fscan_2eproto;
namespace rtabmap {
class LaserScanProto;
struct LaserScanProtoDefaultTypeInternal;
extern LaserScanProtoDefaultTypeInternal _LaserScanProto_default_instance_;
}  // namespace rtabmap
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rtabmap {

// ===================================================================


// -------------------------------------------------------------------

class LaserScanProto final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rtabmap.LaserScanProto) */ {
 public:
  inline LaserScanProto() : LaserScanProto(nullptr) {}
  ~LaserScanProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LaserScanProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LaserScanProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LaserScanProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline LaserScanProto(const LaserScanProto& from) : LaserScanProto(nullptr, from) {}
  inline LaserScanProto(LaserScanProto&& from) noexcept
      : LaserScanProto(nullptr, std::move(from)) {}
  inline LaserScanProto& operator=(const LaserScanProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScanProto& operator=(LaserScanProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaserScanProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserScanProto* internal_default_instance() {
    return reinterpret_cast<const LaserScanProto*>(
        &_LaserScanProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LaserScanProto& a, LaserScanProto& b) { a.Swap(&b); }
  inline void Swap(LaserScanProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserScanProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaserScanProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LaserScanProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LaserScanProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LaserScanProto& from) { LaserScanProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LaserScanProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rtabmap.LaserScanProto"; }

 protected:
  explicit LaserScanProto(::google::protobuf::Arena* arena);
  LaserScanProto(::google::protobuf::Arena* arena, const LaserScanProto& from);
  LaserScanProto(::google::protobuf::Arena* arena, LaserScanProto&& from) noexcept
      : LaserScanProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatDataFieldNumber = 11,
    kFormatFieldNumber = 1,
    kMaxPointsFieldNumber = 2,
    kRangeMinFieldNumber = 3,
    kRangeMaxFieldNumber = 4,
    kAngleMinFieldNumber = 5,
    kAngleMaxFieldNumber = 6,
    kAngleIncrementFieldNumber = 7,
    kRowsFieldNumber = 8,
    kColsFieldNumber = 9,
    kTypeFieldNumber = 10,
  };
  // bytes mat_data = 11;
  void clear_mat_data() ;
  const std::string& mat_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mat_data(Arg_&& arg, Args_... args);
  std::string* mutable_mat_data();
  PROTOBUF_NODISCARD std::string* release_mat_data();
  void set_allocated_mat_data(std::string* value);

  private:
  const std::string& _internal_mat_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mat_data(
      const std::string& value);
  std::string* _internal_mutable_mat_data();

  public:
  // int32 format = 1;
  void clear_format() ;
  ::int32_t format() const;
  void set_format(::int32_t value);

  private:
  ::int32_t _internal_format() const;
  void _internal_set_format(::int32_t value);

  public:
  // int32 max_points = 2;
  void clear_max_points() ;
  ::int32_t max_points() const;
  void set_max_points(::int32_t value);

  private:
  ::int32_t _internal_max_points() const;
  void _internal_set_max_points(::int32_t value);

  public:
  // float range_min = 3;
  void clear_range_min() ;
  float range_min() const;
  void set_range_min(float value);

  private:
  float _internal_range_min() const;
  void _internal_set_range_min(float value);

  public:
  // float range_max = 4;
  void clear_range_max() ;
  float range_max() const;
  void set_range_max(float value);

  private:
  float _internal_range_max() const;
  void _internal_set_range_max(float value);

  public:
  // float angle_min = 5;
  void clear_angle_min() ;
  float angle_min() const;
  void set_angle_min(float value);

  private:
  float _internal_angle_min() const;
  void _internal_set_angle_min(float value);

  public:
  // float angle_max = 6;
  void clear_angle_max() ;
  float angle_max() const;
  void set_angle_max(float value);

  private:
  float _internal_angle_max() const;
  void _internal_set_angle_max(float value);

  public:
  // float angle_increment = 7;
  void clear_angle_increment() ;
  float angle_increment() const;
  void set_angle_increment(float value);

  private:
  float _internal_angle_increment() const;
  void _internal_set_angle_increment(float value);

  public:
  // int32 rows = 8;
  void clear_rows() ;
  ::int32_t rows() const;
  void set_rows(::int32_t value);

  private:
  ::int32_t _internal_rows() const;
  void _internal_set_rows(::int32_t value);

  public:
  // int32 cols = 9;
  void clear_cols() ;
  ::int32_t cols() const;
  void set_cols(::int32_t value);

  private:
  ::int32_t _internal_cols() const;
  void _internal_set_cols(::int32_t value);

  public:
  // int32 type = 10;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rtabmap.LaserScanProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LaserScanProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr mat_data_;
    ::int32_t format_;
    ::int32_t max_points_;
    float range_min_;
    float range_max_;
    float angle_min_;
    float angle_max_;
    float angle_increment_;
    ::int32_t rows_;
    ::int32_t cols_;
    ::int32_t type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_laser_5fscan_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LaserScanProto

// int32 format = 1;
inline void LaserScanProto::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0;
}
inline ::int32_t LaserScanProto::format() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.format)
  return _internal_format();
}
inline void LaserScanProto::set_format(::int32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.format)
}
inline ::int32_t LaserScanProto::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void LaserScanProto::_internal_set_format(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// int32 max_points = 2;
inline void LaserScanProto::clear_max_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_points_ = 0;
}
inline ::int32_t LaserScanProto::max_points() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.max_points)
  return _internal_max_points();
}
inline void LaserScanProto::set_max_points(::int32_t value) {
  _internal_set_max_points(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.max_points)
}
inline ::int32_t LaserScanProto::_internal_max_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_points_;
}
inline void LaserScanProto::_internal_set_max_points(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_points_ = value;
}

// float range_min = 3;
inline void LaserScanProto::clear_range_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_min_ = 0;
}
inline float LaserScanProto::range_min() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.range_min)
  return _internal_range_min();
}
inline void LaserScanProto::set_range_min(float value) {
  _internal_set_range_min(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.range_min)
}
inline float LaserScanProto::_internal_range_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.range_min_;
}
inline void LaserScanProto::_internal_set_range_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_min_ = value;
}

// float range_max = 4;
inline void LaserScanProto::clear_range_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_max_ = 0;
}
inline float LaserScanProto::range_max() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.range_max)
  return _internal_range_max();
}
inline void LaserScanProto::set_range_max(float value) {
  _internal_set_range_max(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.range_max)
}
inline float LaserScanProto::_internal_range_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.range_max_;
}
inline void LaserScanProto::_internal_set_range_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.range_max_ = value;
}

// float angle_min = 5;
inline void LaserScanProto::clear_angle_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_min_ = 0;
}
inline float LaserScanProto::angle_min() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.angle_min)
  return _internal_angle_min();
}
inline void LaserScanProto::set_angle_min(float value) {
  _internal_set_angle_min(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.angle_min)
}
inline float LaserScanProto::_internal_angle_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_min_;
}
inline void LaserScanProto::_internal_set_angle_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_min_ = value;
}

// float angle_max = 6;
inline void LaserScanProto::clear_angle_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_max_ = 0;
}
inline float LaserScanProto::angle_max() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.angle_max)
  return _internal_angle_max();
}
inline void LaserScanProto::set_angle_max(float value) {
  _internal_set_angle_max(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.angle_max)
}
inline float LaserScanProto::_internal_angle_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_max_;
}
inline void LaserScanProto::_internal_set_angle_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_max_ = value;
}

// float angle_increment = 7;
inline void LaserScanProto::clear_angle_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_increment_ = 0;
}
inline float LaserScanProto::angle_increment() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.angle_increment)
  return _internal_angle_increment();
}
inline void LaserScanProto::set_angle_increment(float value) {
  _internal_set_angle_increment(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.angle_increment)
}
inline float LaserScanProto::_internal_angle_increment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_increment_;
}
inline void LaserScanProto::_internal_set_angle_increment(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_increment_ = value;
}

// int32 rows = 8;
inline void LaserScanProto::clear_rows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_ = 0;
}
inline ::int32_t LaserScanProto::rows() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.rows)
  return _internal_rows();
}
inline void LaserScanProto::set_rows(::int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.rows)
}
inline ::int32_t LaserScanProto::_internal_rows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rows_;
}
inline void LaserScanProto::_internal_set_rows(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_ = value;
}

// int32 cols = 9;
inline void LaserScanProto::clear_cols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cols_ = 0;
}
inline ::int32_t LaserScanProto::cols() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.cols)
  return _internal_cols();
}
inline void LaserScanProto::set_cols(::int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.cols)
}
inline ::int32_t LaserScanProto::_internal_cols() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cols_;
}
inline void LaserScanProto::_internal_set_cols(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cols_ = value;
}

// int32 type = 10;
inline void LaserScanProto::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::int32_t LaserScanProto::type() const {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.type)
  return _internal_type();
}
inline void LaserScanProto::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.type)
}
inline ::int32_t LaserScanProto::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_;
}
inline void LaserScanProto::_internal_set_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bytes mat_data = 11;
inline void LaserScanProto::clear_mat_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mat_data_.ClearToEmpty();
}
inline const std::string& LaserScanProto::mat_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rtabmap.LaserScanProto.mat_data)
  return _internal_mat_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LaserScanProto::set_mat_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mat_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rtabmap.LaserScanProto.mat_data)
}
inline std::string* LaserScanProto::mutable_mat_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mat_data();
  // @@protoc_insertion_point(field_mutable:rtabmap.LaserScanProto.mat_data)
  return _s;
}
inline const std::string& LaserScanProto::_internal_mat_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mat_data_.Get();
}
inline void LaserScanProto::_internal_set_mat_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mat_data_.Set(value, GetArena());
}
inline std::string* LaserScanProto::_internal_mutable_mat_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mat_data_.Mutable( GetArena());
}
inline std::string* LaserScanProto::release_mat_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rtabmap.LaserScanProto.mat_data)
  return _impl_.mat_data_.Release();
}
inline void LaserScanProto::set_allocated_mat_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mat_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mat_data_.IsDefault()) {
    _impl_.mat_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rtabmap.LaserScanProto.mat_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rtabmap


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // laser_5fscan_2eproto_2epb_2eh
